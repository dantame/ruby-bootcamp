#RSpec: Rock, Paper, Scissor
![Alt text](https://m2.behance.net/rendition/pm/2852051/disp/cfc4ec1a928ce0285a4e5f1308cd455e.jpg)
#Excercise
We just watched a [video](https://www.codeschool.com/screencasts/rspec-3-best-practices) showing TDD in conjunction with RSpec3.

Implement your own version of Rock, Paper, Scissor. Try and go top down and use all that RSpec has to offer.

**Note:** For the avoidance of doubt.

<<<<<<< HEAD
- Rock beats Scissors
- Paper beats Rock
- Scissors beats Paper
=======
##Exercise
In [lib/ruby_bootcamp/exercise_8](./lib/lib/ruby_bootcamp/exercise_8) you will find code for a [Person](./lib/lib/ruby_bootcamp/exercise_8/person.rb) and [Robot](./lib/lib/ruby_bootcamp/exercise_8/robot.rb).

You'll note that they have similar capability, but they represent things that are fundamentally different. This means that inheritance may not be the right way to remove the duplication that exists between them.

Create sensible modules and the corresponding tests for them and the person and robot classes.

### Extra credit
- Find an efficient way to check that the module is in use
- Both Person and Robot behave like walking talking things. Maybe shared examples could bring some benefit here? [Shared examples](https://www.relishapp.com/rspec/rspec-core/docs/example-groups/shared-examples). 
>>>>>>> Update readme.md
